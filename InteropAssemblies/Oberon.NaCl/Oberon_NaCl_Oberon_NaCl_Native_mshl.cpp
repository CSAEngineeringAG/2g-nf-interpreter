//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "Oberon_NaCl.h"
#include "Oberon_NaCl_Oberon_NaCl_Native.h"

using namespace Oberon::NaCl;


HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_compatibility_check___STATIC__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int retVal = Native::Crypto_compatibility_check( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_box_compute_keypair___STATIC__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        signed int retVal = Native::Crypto_box_compute_keypair( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_box___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        CLR_RT_TypedArray_UINT8 param7;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 7, param7 ) );

        signed int retVal = Native::Crypto_box( param0, param1, param2, param3, param4, param5, param6, param7, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_box_open___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        CLR_RT_TypedArray_UINT8 param7;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 7, param7 ) );

        signed int retVal = Native::Crypto_box_open( param0, param1, param2, param3, param4, param5, param6, param7, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_box_beforenm___STATIC__I4__SZARRAY_U1__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int retVal = Native::Crypto_box_beforenm( param0, param1, param2, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_box_afternm___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_box_afternm( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_box_open_afternm___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_box_open_afternm( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_scalarmult_base___STATIC__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        signed int retVal = Native::Crypto_scalarmult_base( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_scalarmult___STATIC__I4__SZARRAY_U1__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int retVal = Native::Crypto_scalarmult( param0, param1, param2, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_sign_compute_keypair___STATIC__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        signed int retVal = Native::Crypto_sign_compute_keypair( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_sign___STATIC__I4__SZARRAY_U1__I4__BYREF_U4__SZARRAY_U1__I4__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        unsigned int * param2;
        unsigned char heapblock2[CLR_RT_HEAP_BLOCK_SIZE];
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ByRef( stack, heapblock2, 2, param2 ) );

        CLR_RT_TypedArray_UINT8 param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        signed int param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_sign( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

        NANOCLR_CHECK_HRESULT( Interop_Marshal_StoreRef( stack, heapblock2, 2 ) );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_sign_open___STATIC__I4__SZARRAY_U1__I4__BYREF_U4__SZARRAY_U1__I4__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        unsigned int * param2;
        unsigned char heapblock2[CLR_RT_HEAP_BLOCK_SIZE];
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ByRef( stack, heapblock2, 2, param2 ) );

        CLR_RT_TypedArray_UINT8 param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        signed int param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_sign_open( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

        NANOCLR_CHECK_HRESULT( Interop_Marshal_StoreRef( stack, heapblock2, 2 ) );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_secretbox___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_secretbox( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_secretbox_open___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_secretbox_open( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_stream___STATIC__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        signed int param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        CLR_RT_TypedArray_UINT8 param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param3 ) );

        CLR_RT_TypedArray_UINT8 param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 4, param4 ) );

        signed int retVal = Native::Crypto_stream( param0, param1, param2, param3, param4, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_stream_xor___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        signed int retVal = Native::Crypto_stream_xor( param0, param1, param2, param3, param4, param5, param6, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_onetimeauth___STATIC__I4__SZARRAY_U1__SZARRAY_U1__I4__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        signed int param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        CLR_RT_TypedArray_UINT8 param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 4, param4 ) );

        signed int retVal = Native::Crypto_onetimeauth( param0, param1, param2, param3, param4, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_onetimeauth_verify___STATIC__I4__SZARRAY_U1__SZARRAY_U1__I4__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        signed int param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        CLR_RT_TypedArray_UINT8 param4;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 4, param4 ) );

        signed int retVal = Native::Crypto_onetimeauth_verify( param0, param1, param2, param3, param4, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_hash___STATIC__I4__SZARRAY_U1__SZARRAY_U1__I4__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        signed int param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int retVal = Native::Crypto_hash( param0, param1, param2, param3, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_verify_16___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int retVal = Native::Crypto_verify_16( param0, param1, param2, param3, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_Oberon_NaCl_Oberon_NaCl_Native::Crypto_verify_32___STATIC__I4__SZARRAY_U1__I4__SZARRAY_U1__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        signed int param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        signed int retVal = Native::Crypto_verify_32( param0, param1, param2, param3, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}
