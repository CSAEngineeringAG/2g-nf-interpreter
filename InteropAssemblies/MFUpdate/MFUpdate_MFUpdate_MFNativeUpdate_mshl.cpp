//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "MFUpdate.h"
#include "MFUpdate_MFUpdate_MFNativeUpdate.h"

using namespace MFUpdate;


HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::_cctor___STATIC__VOID( CLR_RT_StackFrame& stack )
{
    (void)stack;

    NANOCLR_HEADER(); hr = S_OK;
    {
        MFNativeUpdate::_cctor( hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::Initialize___STATIC__I4__MFUpdateMFUpdateBase( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        UNSUPPORTED_TYPE param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UNSUPPORTED_TYPE( stack, 0, param0 ) );

        signed int retVal = MFNativeUpdate::Initialize( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::Authenticate___STATIC__BOOLEAN__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        bool retVal = MFNativeUpdate::Authenticate( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::Open___STATIC__BOOLEAN__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        bool retVal = MFNativeUpdate::Open( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::Create___STATIC__BOOLEAN__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        bool retVal = MFNativeUpdate::Create( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::GetMissingPackets___STATIC__VOID__I4__SZARRAY_U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT32 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 1, param1 ) );

        MFNativeUpdate::GetMissingPackets( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::AddPacket___STATIC__BOOLEAN__I4__I4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        CLR_RT_TypedArray_UINT8 param3;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param3 ) );

        bool retVal = MFNativeUpdate::AddPacket( param0, param1, param2, param3, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::Validate___STATIC__BOOLEAN__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        bool retVal = MFNativeUpdate::Validate( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::Install___STATIC__BOOLEAN__I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        bool retVal = MFNativeUpdate::Install( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_MFUpdate_MFUpdate_MFNativeUpdate::SerializeParameter___STATIC__SZARRAY_U1__OBJECT( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        UNSUPPORTED_TYPE param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UNSUPPORTED_TYPE( stack, 0, param0 ) );

        unsigned char retVal = MFNativeUpdate::SerializeParameter( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT8( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}
