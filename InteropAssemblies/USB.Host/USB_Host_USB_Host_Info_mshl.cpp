//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "USB_Host.h"
#include "USB_Host_USB_Host_Info.h"

using namespace USB::Host;


HRESULT Library_USB_Host_USB_Host_Info::NativeIsDevicePresent___STATIC__BOOLEAN( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        bool retVal = Info::NativeIsDevicePresent( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_USB_Host_USB_Host_Info::NativeGetVID___STATIC__U2( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        unsigned short retVal = Info::NativeGetVID( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT16( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_USB_Host_USB_Host_Info::NativeGetPID___STATIC__U2( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        unsigned short retVal = Info::NativeGetPID( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT16( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_USB_Host_USB_Host_Info::NativeGetSerialNumber___STATIC__STRING( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        const char* retVal = Info::NativeGetSerialNumber( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_LPCSTR( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_USB_Host_USB_Host_Info::NativeGetManufacturerString___STATIC__STRING( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        const char* retVal = Info::NativeGetManufacturerString( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_LPCSTR( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_USB_Host_USB_Host_Info::NativeGetProductString___STATIC__STRING( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        const char* retVal = Info::NativeGetProductString( hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_LPCSTR( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}
