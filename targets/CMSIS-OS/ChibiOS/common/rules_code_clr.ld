/*
//
// Copyright (c) 2017 The nanoFramework project contributors
// Portions Copyright (c) 2006..2015 Giovanni Di Sirio.  All rights reserved.
// See LICENSE file in the project root for full license information.
//
*/

__nanoImage_start__     = ORIGIN(flash);
__nanoImage_size__      = LENGTH(flash);
__nanoImage_end__       = __nanoImage_start__ + __nanoImage_size__;
__nanoConfig_start__    = ORIGIN(config);
__nanoConfig_size__     = LENGTH(config);
__nanoConfig_end__      = __nanoConfig_start__ + __nanoConfig_size__;
__deployment_start__    = ORIGIN(deployment);
__deployment_size__     = LENGTH(deployment);
__deployment_end__      = __deployment_start__ + __deployment_size__;

/* 
// insert 512 byte block at the beginning of the flash to make nanoCLR compatible 
// with .NET MicroFramework tinyBooter
// CSA Engineering AG 2020 (mku)
*/
__netmfBlock_start__    = ORIGIN(netmf);
__netmfBlock_size__     = LENGTH(netmf);
__netmfBlock_end__      = __netmfBlock_start__ + __netmfBlock_size__;

ENTRY(Reset_Handler)

SECTIONS
{
    .netmfstart :
    {
        KEEP(*(.netmfstart))
        . = ALIGN(512);
    } > NETMF_START AT > NETMF_START_LMA

    .vectors : ALIGN(16)
    {
        KEEP(*(.vectors))
    } > VECTORS_FLASH AT > VECTORS_FLASH_LMA

    .xtors : ALIGN(4)
    {
        __init_array_start = .;
        KEEP(*(SORT(.init_array.*)))
        KEEP(*(.init_array))
        __init_array_end = .;
        __fini_array_start = .;
        KEEP(*(.fini_array))
        KEEP(*(SORT(.fini_array.*)))
        __fini_array_end = .;
    } > XTORS_FLASH AT > XTORS_FLASH_LMA

    .text : ALIGN(16)
    {
        targets/CMSIS-OS/ChibiOS/2G_M4-MCU/CMakeFiles/nanoCLR.elf.dir/__/__/__/__/ChibiOS_Source/os/common/startup/ARMCMx/compilers/GCC/vectors.S.obj(.text)
        targets/CMSIS-OS/ChibiOS/2G_M4-MCU/CMakeFiles/nanoCLR.elf.dir/__/__/__/__/ChibiOS_Source/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S.obj(.text)
        *(.text)
        *(.text.*)
        *(.glue_7t)
        *(.glue_7)
        *(.gcc*)
    } > TEXT_FLASH AT > TEXT_FLASH_LMA

    .rodata : ALIGN(4)
    {
        . = ALIGN(4);
        __rodata_base__ = .;
        *(.rodata)
        *(.rodata.*)
        . = ALIGN(4);
        __rodata_end__ = .;
    } > RODATA_FLASH AT > RODATA_FLASH_LMA

    .ARM.extab :
    {
        *(.ARM.extab* .gnu.linkonce.armextab.*)
    } > VARIOUS_FLASH AT > VARIOUS_FLASH_LMA

    .ARM.exidx : {
        __exidx_start = .;
        *(.ARM.exidx* .gnu.linkonce.armexidx.*)
        __exidx_end = .;
     } > VARIOUS_FLASH AT > VARIOUS_FLASH_LMA

    .eh_frame_hdr :
    {
        *(.eh_frame_hdr)
    } > VARIOUS_FLASH AT > VARIOUS_FLASH_LMA

    .eh_frame : ONLY_IF_RO
    {
        *(.eh_frame)
    } > VARIOUS_FLASH AT > VARIOUS_FLASH_LMA
}
